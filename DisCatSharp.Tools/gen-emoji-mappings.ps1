# Emoji Mapping Generator for DisCatSharp
#
# This script parses emojis.json and generates C# code for emoji mappings used in DiscordEmoji.EmojiUtils.cs.
#
# To get the data from the discord client:
# delete window.$;
# let wpRequire = webpackChunkdiscord_app.push([[Symbol()], {}, r => r]);
# webpackChunkdiscord_app.pop();
# Object.values(wpRequire.c).find(x => x?.exports?.surrogateToEmoji).exports;
#
# Usage: Run this script in the DisCatSharp.Tools directory. It will read emojis.json and output EmojiUtils.Generated.cs.

param(
    [string]$InputJson = "emojis.json",
    [string]$emojiMappingPath = "..\DisCatSharp\Entities\Emoji\DiscordEmoji.Mapping.cs",
    [string]$unicodeEmojiPath = "..\DisCatSharp\Entities\Emoji\DiscordUnicodeEmoji.cs"
)

function Get-EscapedString {
    param([string]$str)
    return $str.Replace('"', '\"')
}

Write-Host "Reading $InputJson..."
$json = Get-Content $InputJson -Raw | ConvertFrom-Json

$nameToEmoji = $json.nameToEmoji
$surrogateToEmoji = $json.surrogateToEmoji
# $emojis = $json.emojis

$indexToUnicode = @{}
foreach ($prop in $surrogateToEmoji.psobject.Properties) {
    $unicode = $prop.Name
    $idx = $prop.Value
    $indexToUnicode[$idx] = $unicode
}

$unicodeSeen = @{}
$s_unicodeEmojis = @()
foreach ($prop in $nameToEmoji.psobject.Properties) {
    $name = $prop.Name
    $idx = $prop.Value
    if ($name.StartsWith(":") -and $name.EndsWith(":")) {
        $colonName = $name
    } else {
        $colonName = ":${name}:"
    }
    $escapedName = Get-EscapedString $colonName
    if ($indexToUnicode.ContainsKey($idx)) {
        $unicode = $indexToUnicode[$idx]
        if (-not $unicodeSeen.ContainsKey($unicode)) {
            $escapedUnicode = Get-EscapedString $unicode
            $s_unicodeEmojis += "            { `"$escapedName`", `"$escapedUnicode`" },"
            $unicodeSeen[$unicode] = $colonName
        }
    }
}

$discordNameSeen = @{}
$s_discordNameLookup = @()
foreach ($prop in $nameToEmoji.psobject.Properties) {
    $name = $prop.Name
    $idx = $prop.Value
    if ($name.StartsWith(":") -and $name.EndsWith(":")) {
        $colonName = $name
    } else {
        $colonName = ":${name}:"
    }
    $escapedName = Get-EscapedString $colonName
    if ($indexToUnicode.ContainsKey($idx)) {
        $unicode = $indexToUnicode[$idx]
        if (-not $discordNameSeen.ContainsKey($unicode)) {
            $escapedUnicode = Get-EscapedString $unicode
            $s_discordNameLookup += "            { `"$escapedUnicode`", `"$escapedName`" },"
            $discordNameSeen[$unicode] = "true"
        }
    }
}

$aliasMap = @{}
foreach ($prop in $nameToEmoji.psobject.Properties) {
    $name = $prop.Name
    $idx = $prop.Value
    if ($name.StartsWith(":") -and $name.EndsWith(":")) {
        $colonName = $name
    } else {
        $colonName = ":${name}:"
    }
    if ($indexToUnicode.ContainsKey($idx)) {
        $unicode = $indexToUnicode[$idx]
        $canonical = $unicodeSeen[$unicode]
        if ($colonName -ne $canonical) {
            $aliasMap[$colonName] = $canonical
        }
    }
}

$s_aliasNameToCanonical = @()
foreach ($k in $aliasMap.Keys) {
    $escapedAlias = Get-EscapedString $k
    $escapedCanonical = Get-EscapedString $aliasMap[$k]
    $s_aliasNameToCanonical += "            { `"$escapedAlias`", `"$escapedCanonical`" },"
}

$header = @"
// <auto-generated>
//     This file was generated by gen-emoji-mappings.ps1. Do not edit manually.
// </auto-generated>
using System.Collections.Generic;

namespace DisCatSharp.Entities;

/// <summary>
///     Represents discord emoji.
/// </summary>
public partial class DiscordEmoji
{
	/// <summary>
	///     Initializes a new instance of the <see cref="DiscordEmoji" /> class.
	/// </summary>
	static DiscordEmoji()
	{
#region Generated Emoji Map
        s_unicodeEmojis = new()
		{
"@
$middlePart = @"
        };

		s_discordNameLookup = new()
		{
"@
$endPart = @"
        };

		s_aliasNameToCanonical = new()
		{
"@
$footer = @"
        };
#endregion
	}

	/// <summary>
	///     Gets a mapping of :name: => unicode.
	/// </summary>
	private static Dictionary<string, string> s_unicodeEmojis { get; }

	/// <summary>
	///     Gets a mapping of unicode => :name:.
	/// </summary>
	private static Dictionary<string, string> s_discordNameLookup { get; }

	/// <summary>
	///     Gets a mapping of :alias_name: => :name:.
	/// </summary>
	private static Dictionary<string, string> s_aliasNameToCanonical { get; }
}

"@

Write-Host "Writing $emojiMappingPath..."
Set-Content -Path $emojiMappingPath -Value $header -Encoding UTF8
Add-Content -Path $emojiMappingPath -Value ($s_unicodeEmojis -join "`n")
Add-Content -Path $emojiMappingPath -Value $middlePart -Encoding UTF8
Add-Content -Path $emojiMappingPath -Value ($s_discordNameLookup -join "`n")
Add-Content -Path $emojiMappingPath -Value $endPart -Encoding UTF8
Add-Content -Path $emojiMappingPath -Value ($s_aliasNameToCanonical -join "`n")
Add-Content -Path $emojiMappingPath -Value $footer -Encoding UTF8
Write-Host "Done! Emoji mappings generated in $emojiMappingPath."

$unicodeHeader = @"
// <auto-generated>
//     This file was generated by gen-emoji-mappings.ps1. Do not edit manually.
// </auto-generated>
namespace DisCatSharp.Entities;

/// <summary>
///     Represents a discord unicode emoji.
/// </summary>
public class DiscordUnicodeEmoji
{
"@
$unicodeConsts = @()
$usedIds = @{}
foreach ($prop in $nameToEmoji.psobject.Properties) {
    $name = $prop.Name
    $idx = $prop.Value
    if ($indexToUnicode.ContainsKey($idx)) {
        $unicode = $indexToUnicode[$idx]
        $id = $name.Trim(':').Replace('-', '_').Replace(' ', '_')
        $id = $id -replace '[^a-zA-Z0-9_]', ''
        if ($id -match '^[0-9]') { $id = "_" + $id }
        $id = $id.ToUpper()
        if (-not $usedIds.ContainsKey($id)) {
            $unicodeConsts += "    public const string $id = `"$unicode`";"
            $usedIds[$id] = $true
        }
    }
}
$unicodeFooter = "}"

Write-Host "Writing $unicodeEmojiPath..."
Set-Content -Path $unicodeEmojiPath -Value $unicodeHeader -Encoding UTF8
Add-Content -Path $unicodeEmojiPath -Value ($unicodeConsts -join "`n")
Add-Content -Path $unicodeEmojiPath -Value $unicodeFooter -Encoding UTF8
Write-Host "Done! UnicodeEmojis generated in $unicodeEmojiPath."
